; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -unify-loop-exits -S | FileCheck %s

; Loop consists of A and B:
; - A is the header
; - A and B are exiting blocks
; - C and return are exit blocks.

; Pattern: Value (%tmp42) defined in exiting block (A) and used in
;          exit block (return).
;          The relevant code uses DT::dominates(Value,
;          BasicBlock). This is misnamed because it actually checks
;          strict dominance, causing the pattern to be miscompiled
;          (the use receives an undef value).

define i32 @foo(i32* %arg1, i32* %arg2) local_unnamed_addr align 2 {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label %A
; CHECK:       A:
; CHECK-NEXT:    [[TMP42:%.*]] = load i32, i32* [[ARG1:%.*]], align 4
; CHECK-NEXT:    [[CMP1:%.*]] = icmp slt i32 [[TMP42]], 0
; CHECK-NEXT:    br i1 [[CMP1]], label %B, label [[LOOPEXITBLOCK:%.*]]
; CHECK:       B:
; CHECK-NEXT:    [[TMP41:%.*]] = load i32, i32* [[ARG2:%.*]], align 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP41]], 0
; CHECK-NEXT:    br i1 [[CMP]], label %A, label [[LOOPEXITBLOCK]]
; CHECK:       C:
; CHECK-NEXT:    [[INC:%.*]] = add i32 [[TMP41_MOVED:%.*]], 1
; CHECK-NEXT:    br label %return
; CHECK:       return:
; CHECK-NEXT:    [[PHI:%.*]] = phi i32 [ [[INC]], %C ], [ [[PHI_MOVED:%.*]], [[LOOPEXITBLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI]]
; CHECK:       LoopExitBlock:
; CHECK-NEXT:    [[TMP41_MOVED]] = phi i32 [ undef, %A ], [ [[TMP41]], %B ]
; CHECK-NEXT:    [[PHI_MOVED]] = phi i32 [ [[TMP42]], %A ], [ undef, %B ]
; CHECK-NEXT:    [[LOOPEXITGUARD_RETURN:%.*]] = phi i1 [ true, %A ], [ false, %B ]
; CHECK-NEXT:    br i1 [[LOOPEXITGUARD_RETURN]], label %return, label %C
;
entry:
  br label %A

A:                                       ; preds = %B, %A.lr.ph
  %tmp42 = load i32, i32* %arg1, align 4
  %cmp1 = icmp slt i32 %tmp42, 0
  br i1 %cmp1, label %B, label %return

B:                                           ; preds = %A
  %tmp41 = load i32, i32* %arg2, align 4
  %cmp = icmp slt i32 %tmp41, 0
  br i1 %cmp, label %A, label %C

C:
  %inc = add i32 %tmp41, 1
  br label %return

return:                                           ; preds = %B38, %A
  %phi = phi i32 [ %inc, %C ], [ %tmp42, %A ]
  ret i32 %phi
}
