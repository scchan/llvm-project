; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -eliminate-irreducibility -S | FileCheck %s -check-prefix=CHECK

define void @irreducible_basic(i1 %PredEntry, i1 %PredLeft, i1 %PredRight) {
; CHECK-LABEL: @irreducible_basic(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PREDENTRY_INV:%.*]] = xor i1 [[PREDENTRY:%.*]], true
; CHECK-NEXT:    br label [[CYCLEHEADER:%.*]]
; CHECK:       left:
; CHECK-NEXT:    br i1 [[PREDLEFT:%.*]], label [[CYCLEHEADER]], label [[EXIT:%.*]]
; CHECK:       right:
; CHECK-NEXT:    br i1 [[PREDRIGHT:%.*]], label [[CYCLEHEADER]], label [[EXIT]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
; CHECK:       CycleHeader:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i1 [ true, [[RIGHT:%.*]] ], [ [[PREDENTRY]], [[ENTRY:%.*]] ], [ false, [[LEFT:%.*]] ]
; CHECK-NEXT:    br i1 [[TMP0]], label [[LEFT]], label [[RIGHT]]
;
entry:
  br i1 %PredEntry, label %left, label %right

left:                                             ; preds = %right, %entry
  br i1 %PredLeft, label %right, label %exit

right:                                            ; preds = %left, %entry
  br i1 %PredRight, label %left, label %exit

exit:                                             ; preds = %right, %left
  ret void
}

define void @irreducible_mess(i1 %PredEntry, i1 %PredA, i1 %PredB, i1 %PredC, i1 %PredD) {
; CHECK-LABEL: @irreducible_mess(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PREDC_INV:%.*]] = xor i1 [[PREDC:%.*]], true
; CHECK-NEXT:    [[PREDA_INV:%.*]] = xor i1 [[PREDA:%.*]], true
; CHECK-NEXT:    [[PREDD_INV:%.*]] = xor i1 [[PREDD:%.*]], true
; CHECK-NEXT:    [[PREDB_INV:%.*]] = xor i1 [[PREDB:%.*]], true
; CHECK-NEXT:    br i1 [[PREDENTRY:%.*]], label [[A:%.*]], label [[B:%.*]]
; CHECK:       A:
; CHECK-NEXT:    br label [[CYCLEHEADER:%.*]]
; CHECK:       B:
; CHECK-NEXT:    br label [[CYCLEHEADER]]
; CHECK:       C:
; CHECK-NEXT:    br i1 [[PREDC]], label [[EXIT:%.*]], label [[CYCLEHEADER]]
; CHECK:       D:
; CHECK-NEXT:    br i1 [[PREDD]], label [[EXIT]], label [[CYCLEHEADER]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
; CHECK:       CycleHeader:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i1 [ true, [[C:%.*]] ], [ [[PREDB]], [[B]] ], [ [[PREDA_INV]], [[A]] ], [ false, [[D:%.*]] ]
; CHECK-NEXT:    br i1 [[TMP0]], label [[D]], label [[C]]
;
entry:
  br i1 %PredEntry, label %A, label %B

A:                                                ; preds = %entry
  br i1 %PredA, label %C, label %D

B:                                                ; preds = %entry
  br i1 %PredB, label %D, label %C

C:                                                ; preds = %D, %B, %A
  br i1 %PredC, label %exit, label %D

D:                                                ; preds = %C, %B, %A
  br i1 %PredD, label %exit, label %C

exit:                                             ; preds = %D, %C
  ret void
}

define void @irreducible_header_without_incoming(i1 %PredEntry, i1 %PredD, i1 %PredF) {
; CHECK-LABEL: @irreducible_header_without_incoming(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PREDENTRY_INV:%.*]] = xor i1 [[PREDENTRY:%.*]], true
; CHECK-NEXT:    br label [[CYCLEHEADER:%.*]]
; CHECK:       A:
; CHECK-NEXT:    br label [[B:%.*]]
; CHECK:       B:
; CHECK-NEXT:    br label [[CYCLEHEADER]]
; CHECK:       C:
; CHECK-NEXT:    br label [[D:%.*]]
; CHECK:       D:
; CHECK-NEXT:    br i1 [[PREDD:%.*]], label [[E:%.*]], label [[EXIT:%.*]]
; CHECK:       E:
; CHECK-NEXT:    br label [[CYCLEHEADER]]
; CHECK:       F:
; CHECK-NEXT:    br i1 [[PREDF:%.*]], label [[A:%.*]], label [[EXIT]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
; CHECK:       CycleHeader:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i1 [ true, [[E]] ], [ [[PREDENTRY]], [[ENTRY:%.*]] ], [ false, [[B]] ]
; CHECK-NEXT:    br i1 [[TMP0]], label [[F:%.*]], label [[C:%.*]]
;
entry:
  br i1 %PredEntry, label %F, label %C

A:                                                ; preds = %F
  br label %B

B:                                                ; preds = %A
  br label %C

C:                                                ; preds = %B, %entry
  br label %D

D:                                                ; preds = %C
  br i1 %PredD, label %E, label %exit

E:                                                ; preds = %D
  br label %F

F:                                                ; preds = %E, %entry
  br i1 %PredF, label %A, label %exit

exit:                                             ; preds = %F, %D
  ret void
}

define void @irreducible_mountain_bug(i1 %Pred0, i1 %Pred1, i1 %Pred2, i1 %Pred3, i1 %Pred4, i1 %Pred5, i1 %Pred6, i1 %Pred7, i1 %Pred8, i1 %Pred9, i1 %Pred10, i1 %Pred11, i1 %Pred12, i1 %Pred13) {
; CHECK-LABEL: @irreducible_mountain_bug(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PRED6_INV:%.*]] = xor i1 [[PRED6:%.*]], true
; CHECK-NEXT:    br i1 [[PRED0:%.*]], label [[IF_END:%.*]], label [[IF_THEN:%.*]]
; CHECK:       if.end:
; CHECK-NEXT:    br i1 [[PRED1:%.*]], label [[IF_THEN7:%.*]], label [[IF_ELSE:%.*]]
; CHECK:       if.then7:
; CHECK-NEXT:    br label [[IF_END16:%.*]]
; CHECK:       if.else:
; CHECK-NEXT:    br label [[IF_END16]]
; CHECK:       if.end16:
; CHECK-NEXT:    br i1 [[PRED2:%.*]], label [[WHILE_COND_PREHEADER:%.*]], label [[IF_THEN39:%.*]]
; CHECK:       while.cond.preheader:
; CHECK-NEXT:    br label [[WHILE_COND:%.*]]
; CHECK:       while.cond:
; CHECK-NEXT:    br i1 [[PRED3:%.*]], label [[CYCLEHEADER:%.*]], label [[LOR_RHS:%.*]]
; CHECK:       cond.true49:
; CHECK-NEXT:    br i1 [[PRED4:%.*]], label [[IF_THEN69:%.*]], label [[WHILE_BODY63:%.*]]
; CHECK:       while.body63:
; CHECK-NEXT:    br i1 [[PRED5:%.*]], label [[EXIT:%.*]], label [[WHILE_COND47:%.*]]
; CHECK:       while.cond47:
; CHECK-NEXT:    br label [[CYCLEHEADER]]
; CHECK:       cond.end61:
; CHECK-NEXT:    br i1 [[PRED7:%.*]], label [[WHILE_BODY63]], label [[WHILE_COND]]
; CHECK:       if.then69:
; CHECK-NEXT:    br i1 [[PRED8:%.*]], label [[EXIT]], label [[WHILE_COND]]
; CHECK:       lor.rhs:
; CHECK-NEXT:    br i1 [[PRED9:%.*]], label [[CYCLEHEADER]], label [[WHILE_END76:%.*]]
; CHECK:       while.end76:
; CHECK-NEXT:    br label [[EXIT]]
; CHECK:       if.then39:
; CHECK-NEXT:    br i1 [[PRED10:%.*]], label [[EXIT]], label [[IF_END_I145:%.*]]
; CHECK:       if.end.i145:
; CHECK-NEXT:    br i1 [[PRED11:%.*]], label [[EXIT]], label [[IF_END8_I149:%.*]]
; CHECK:       if.end8.i149:
; CHECK-NEXT:    br label [[EXIT]]
; CHECK:       if.then:
; CHECK-NEXT:    br i1 [[PRED12:%.*]], label [[EXIT]], label [[IF_END_I:%.*]]
; CHECK:       if.end.i:
; CHECK-NEXT:    br i1 [[PRED13:%.*]], label [[EXIT]], label [[IF_END8_I:%.*]]
; CHECK:       if.end8.i:
; CHECK-NEXT:    br label [[EXIT]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
; CHECK:       CycleHeader:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i1 [ [[PRED6]], [[WHILE_COND47]] ], [ true, [[WHILE_COND]] ], [ false, [[LOR_RHS]] ]
; CHECK-NEXT:    br i1 [[TMP0]], label [[COND_TRUE49:%.*]], label [[COND_END61:%.*]]
;
entry:
  br i1 %Pred0, label %if.end, label %if.then

if.end:                                           ; preds = %entry
  br i1 %Pred1, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.end
  br label %if.end16

if.else:                                          ; preds = %if.end
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then7
  br i1 %Pred2, label %while.cond.preheader, label %if.then39

while.cond.preheader:                             ; preds = %if.end16
  br label %while.cond

while.cond:                                       ; preds = %if.then69, %cond.end61, %while.cond.preheader
  br i1 %Pred3, label %cond.true49, label %lor.rhs

cond.true49:                                      ; preds = %while.cond47, %while.cond
  br i1 %Pred4, label %if.then69, label %while.body63

while.body63:                                     ; preds = %cond.end61, %cond.true49
  br i1 %Pred5, label %exit, label %while.cond47

while.cond47:                                     ; preds = %while.body63
  br i1 %Pred6, label %cond.true49, label %cond.end61

cond.end61:                                       ; preds = %lor.rhs, %while.cond47
  br i1 %Pred7, label %while.body63, label %while.cond

if.then69:                                        ; preds = %cond.true49
  br i1 %Pred8, label %exit, label %while.cond

lor.rhs:                                          ; preds = %while.cond
  br i1 %Pred9, label %cond.end61, label %while.end76

while.end76:                                      ; preds = %lor.rhs
  br label %exit

if.then39:                                        ; preds = %if.end16
  br i1 %Pred10, label %exit, label %if.end.i145

if.end.i145:                                      ; preds = %if.then39
  br i1 %Pred11, label %exit, label %if.end8.i149

if.end8.i149:                                     ; preds = %if.end.i145
  br label %exit

if.then:                                          ; preds = %entry
  br i1 %Pred12, label %exit, label %if.end.i

if.end.i:                                         ; preds = %if.then
  br i1 %Pred13, label %exit, label %if.end8.i

if.end8.i:                                        ; preds = %if.end.i
  br label %exit

exit:                                             ; preds = %if.end8.i, %if.end.i, %if.then, %if.end8.i149, %if.end.i145, %if.then39, %while.end76, %if.then69, %while.body63
  ret void
}
