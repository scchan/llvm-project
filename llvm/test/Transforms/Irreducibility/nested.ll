; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -eliminate-irreducibility -S | FileCheck %s -check-prefix=CHECK

define void @nested_irr_top_level(i1 %Pred0, i1 %Pred1, i1 %Pred2, i1 %Pred3, i1 %Pred4, i1 %Pred5) {
; CHECK-LABEL: @nested_irr_top_level(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PRED0_INV:%.*]] = xor i1 [[PRED0:%.*]], true
; CHECK-NEXT:    [[PRED1_INV:%.*]] = xor i1 [[PRED1:%.*]], true
; CHECK-NEXT:    br label [[CYCLEHEADER:%.*]]
; CHECK:       left1:
; CHECK-NEXT:    br label [[CYCLEHEADER1:%.*]]
; CHECK:       left2:
; CHECK-NEXT:    br i1 [[PRED2:%.*]], label [[CYCLEHEADER1]], label [[EXIT2:%.*]]
; CHECK:       right2:
; CHECK-NEXT:    br i1 [[PRED3:%.*]], label [[CYCLEHEADER1]], label [[EXIT2]]
; CHECK:       exit2:
; CHECK-NEXT:    br i1 [[PRED4:%.*]], label [[CYCLEHEADER]], label [[EXIT1:%.*]]
; CHECK:       right1:
; CHECK-NEXT:    br i1 [[PRED5:%.*]], label [[CYCLEHEADER]], label [[EXIT1]]
; CHECK:       exit1:
; CHECK-NEXT:    ret void
; CHECK:       CycleHeader:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i1 [ true, [[RIGHT1:%.*]] ], [ [[PRED0]], [[ENTRY:%.*]] ], [ false, [[EXIT2]] ]
; CHECK-NEXT:    br i1 [[TMP0]], label [[LEFT1:%.*]], label [[RIGHT1]]
; CHECK:       CycleHeader1:
; CHECK-NEXT:    [[TMP1:%.*]] = phi i1 [ true, [[RIGHT2:%.*]] ], [ [[PRED1]], [[LEFT1]] ], [ false, [[LEFT2:%.*]] ]
; CHECK-NEXT:    br i1 [[TMP1]], label [[LEFT2]], label [[RIGHT2]]
;
entry:
  br i1 %Pred0, label %left1, label %right1

left1:                                            ; preds = %right1, %entry
  br i1 %Pred1, label %left2, label %right2

left2:                                            ; preds = %right2, %left1
  br i1 %Pred2, label %right2, label %exit2

right2:                                           ; preds = %left2, %left1
  br i1 %Pred3, label %left2, label %exit2

exit2:                                            ; preds = %right2, %left2
  br i1 %Pred4, label %right1, label %exit1

right1:                                           ; preds = %exit2, %entry
  br i1 %Pred5, label %left1, label %exit1

exit1:                                            ; preds = %right1, %exit2
  ret void
}

define void @nested_irr_in_loop(i1 %Pred0, i1 %Pred1, i1 %Pred2, i1 %Pred3, i1 %Pred4, i1 %Pred5, i1 %Pred6) {
; CHECK-LABEL: @nested_irr_in_loop(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PRED0_INV:%.*]] = xor i1 [[PRED0:%.*]], true
; CHECK-NEXT:    [[PRED1_INV:%.*]] = xor i1 [[PRED1:%.*]], true
; CHECK-NEXT:    br label [[HEADER1:%.*]]
; CHECK:       header1:
; CHECK-NEXT:    br label [[CYCLEHEADER:%.*]]
; CHECK:       left1:
; CHECK-NEXT:    br label [[CYCLEHEADER1:%.*]]
; CHECK:       left2:
; CHECK-NEXT:    br i1 [[PRED2:%.*]], label [[CYCLEHEADER1]], label [[EXIT2:%.*]]
; CHECK:       right2:
; CHECK-NEXT:    br i1 [[PRED3:%.*]], label [[CYCLEHEADER1]], label [[EXIT2]]
; CHECK:       exit2:
; CHECK-NEXT:    br i1 [[PRED4:%.*]], label [[CYCLEHEADER]], label [[LATCH1:%.*]]
; CHECK:       right1:
; CHECK-NEXT:    br i1 [[PRED5:%.*]], label [[CYCLEHEADER]], label [[LATCH1]]
; CHECK:       latch1:
; CHECK-NEXT:    br i1 [[PRED6:%.*]], label [[EXIT:%.*]], label [[HEADER1]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
; CHECK:       CycleHeader:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i1 [ true, [[RIGHT1:%.*]] ], [ [[PRED0]], [[HEADER1]] ], [ false, [[EXIT2]] ]
; CHECK-NEXT:    br i1 [[TMP0]], label [[LEFT1:%.*]], label [[RIGHT1]]
; CHECK:       CycleHeader1:
; CHECK-NEXT:    [[TMP1:%.*]] = phi i1 [ true, [[RIGHT2:%.*]] ], [ [[PRED1]], [[LEFT1]] ], [ false, [[LEFT2:%.*]] ]
; CHECK-NEXT:    br i1 [[TMP1]], label [[LEFT2]], label [[RIGHT2]]
;
entry:
  br label %header1

header1:                                          ; preds = %latch1, %entry
  br i1 %Pred0, label %left1, label %right1

left1:                                            ; preds = %right1, %header1
  br i1 %Pred1, label %left2, label %right2

left2:                                            ; preds = %right2, %left1
  br i1 %Pred2, label %right2, label %exit2

right2:                                           ; preds = %left2, %left1
  br i1 %Pred3, label %left2, label %exit2

exit2:                                            ; preds = %right2, %left2
  br i1 %Pred4, label %right1, label %latch1

right1:                                           ; preds = %exit2, %header1
  br i1 %Pred5, label %left1, label %latch1

latch1:                                           ; preds = %right1, %exit2
  br i1 %Pred6, label %exit, label %header1

exit:                                             ; preds = %latch1
  ret void
}

define void @loop_in_irr(i1 %Pred0, i1 %Pred1, i1 %Pred2) {
; CHECK-LABEL: @loop_in_irr(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PRED0_INV:%.*]] = xor i1 [[PRED0:%.*]], true
; CHECK-NEXT:    br label [[CYCLEHEADER:%.*]]
; CHECK:       left1:
; CHECK-NEXT:    br label [[HEADER1:%.*]]
; CHECK:       header1:
; CHECK-NEXT:    br label [[LATCH2:%.*]]
; CHECK:       latch2:
; CHECK-NEXT:    br i1 [[PRED1:%.*]], label [[HEADER1]], label [[LATCH1:%.*]]
; CHECK:       latch1:
; CHECK-NEXT:    br i1 [[PRED2:%.*]], label [[CYCLEHEADER]], label [[EXIT:%.*]]
; CHECK:       right1:
; CHECK-NEXT:    br label [[CYCLEHEADER]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
; CHECK:       CycleHeader:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i1 [ true, [[RIGHT1:%.*]] ], [ [[PRED0]], [[ENTRY:%.*]] ], [ false, [[LATCH1]] ]
; CHECK-NEXT:    br i1 [[TMP0]], label [[LEFT1:%.*]], label [[RIGHT1]]
;
entry:
  br i1 %Pred0, label %left1, label %right1

left1:                                            ; preds = %right1, %entry
  br label %header1

header1:                                          ; preds = %latch2, %left1
  br label %latch2

latch2:                                           ; preds = %header1
  br i1 %Pred1, label %header1, label %latch1

latch1:                                           ; preds = %latch2
  br i1 %Pred2, label %right1, label %exit

right1:                                           ; preds = %latch1, %entry
  br label %left1

exit:                                             ; preds = %latch1
  ret void
}

define void @loop_in_irr_shared_header(i1 %Pred0, i1 %Pred1, i1 %Pred2) {
; CHECK-LABEL: @loop_in_irr_shared_header(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PRED0_INV:%.*]] = xor i1 [[PRED0:%.*]], true
; CHECK-NEXT:    br label [[CYCLEHEADER:%.*]]
; CHECK:       left1:
; CHECK-NEXT:    br label [[LATCH2:%.*]]
; CHECK:       latch2:
; CHECK-NEXT:    br i1 [[PRED1:%.*]], label [[CYCLEHEADER]], label [[LATCH1:%.*]]
; CHECK:       latch1:
; CHECK-NEXT:    br i1 [[PRED2:%.*]], label [[CYCLEHEADER]], label [[EXIT:%.*]]
; CHECK:       right1:
; CHECK-NEXT:    br label [[CYCLEHEADER]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
; CHECK:       CycleHeader:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i1 [ true, [[RIGHT1:%.*]] ], [ true, [[LATCH2]] ], [ [[PRED0]], [[ENTRY:%.*]] ], [ false, [[LATCH1]] ]
; CHECK-NEXT:    br i1 [[TMP0]], label [[LEFT1:%.*]], label [[RIGHT1]]
;
entry:
  br i1 %Pred0, label %left1, label %right1

left1:                                            ; preds = %right1, %latch2, %entry
  br label %latch2

latch2:                                           ; preds = %left1
  br i1 %Pred1, label %left1, label %latch1

latch1:                                           ; preds = %latch2
  br i1 %Pred2, label %right1, label %exit

right1:                                           ; preds = %latch1, %entry
  br label %left1

exit:                                             ; preds = %latch1
  ret void
}
